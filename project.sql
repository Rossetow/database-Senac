CREATE SCHEMA PROJECT;
USE PROJECT; /*CREATE AND SELECT WHICH SCHEMA TO USE*/
DROP SCHEMA PROJECT;
-- -----------------------------------------------------
-- Table `LIBRARY_PROJECT`.`PUBLISHER`
-- -----------------------------------------------------
CREATE TABLE `PUBLISHER` (
  `idPUBLISHER` INT NOT NULL,
  `P_NAME` VARCHAR(45) NOT NULL,
  `P_ADRESS` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idPUBLISHER`));
	

-- -----------------------------------------------------
-- Table `LIBRARY_PROJECT`.`LIBRARY`
-- -----------------------------------------------------
CREATE TABLE `LIBRARY` (
  `idLIBRARY` INT NOT NULL AUTO_INCREMENT,
  `LIBRARY_NAME` VARCHAR(45) NOT NULL,
  `LIB_ADRESS` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idLIBRARY`));


-- -----------------------------------------------------
-- Table `LIBRARY_PROJECT`.`BOOK`
-- -----------------------------------------------------
CREATE TABLE `BOOK` (
  `idBOOK` INT NOT NULL AUTO_INCREMENT,
  `BOOK_TITLE` VARCHAR(45) NOT NULL,
  `AUTHOR` INT NOT NULL,
  `AVAIBLE` CHAR NOT NULL DEFAULT 'N',
  `NUM_OF_PAGES` INT NOT NULL,
  `RELEASE_DATE` VARCHAR(45) NOT NULL,
  `PUBLISHER_idPUBLISHER` INT NOT NULL,
  `LIBRARY_idLIBRARY` INT NOT NULL,
  PRIMARY KEY (`idBOOK`),
  CONSTRAINT `fk_BOOK_PUBLISHER1`
    FOREIGN KEY (`PUBLISHER_idPUBLISHER`)
    REFERENCES `PUBLISHER` (`idPUBLISHER`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_BOOK_LIBRARY1`
    FOREIGN KEY (`LIBRARY_idLIBRARY`)
    REFERENCES `LIBRARY` (`idLIBRARY`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);
    
    ALTER TABLE BOOK ADD CONSTRAINT `FK_BOOK_AUTHOR`
    FOREIGN KEY (`AUTHOR`)
    REFERENCES AUTHOR (`IDAUTHOR`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION;
    
    SELECT * FROM BOOK;

-- -----------------------------------------------------
-- Table `LIBRARY_PROJECT`.`AUTHOR`
-- -----------------------------------------------------
CREATE TABLE `AUTHOR` (
  `idAUTHOR` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  `AUTHOR_NAME` VARCHAR(45) NOT NULL,
  `CPF` VARCHAR(20) NOT NULL);

SELECT * FROM AUTHOR;
-- -----------------------------------------------------
-- Table `LIBRARY_PROJECT`.`READERS`
-- -----------------------------------------------------
CREATE TABLE  `READERS` (
  `idREADERS` INT NOT NULL AUTO_INCREMENT,
  `READER_NAME` VARCHAR(45) NOT NULL,
  `CPF` VARCHAR(20) NOT NULL,
  `R_ADRESS` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idREADERS`));


-- -----------------------------------------------------
-- Table `LIBRARY_PROJECT`.`ROLE`
-- -----------------------------------------------------
CREATE TABLE  `ROLE` (
  `idROLE` INT NOT NULL AUTO_INCREMENT,
  `R_NAME` VARCHAR(45) NULL,
  PRIMARY KEY (`idROLE`));


-- -----------------------------------------------------
-- Table `LIBRARY_PROJECT`.`EMPLOYEE`
-- -----------------------------------------------------
CREATE TABLE`EMPLOYEE` (
  `idEMPLOYEE` INT NOT NULL AUTO_INCREMENT,
  `E_NAME` VARCHAR(45) NULL,
  `E_CPF` VARCHAR(20) NULL,
  `LIBRARY_idLIBRARY` INT NOT NULL,
  `ROLE_idROLE` INT NOT NULL,
  PRIMARY KEY (`idEMPLOYEE`),
  CONSTRAINT `fk_EMPLOYEE_LIBRARY1`
    FOREIGN KEY (`LIBRARY_idLIBRARY`)
    REFERENCES `LIBRARY` (`idLIBRARY`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_EMPLOYEE_ROLE1`
    FOREIGN KEY (`ROLE_idROLE`)
    REFERENCES `ROLE` (`idROLE`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);
    
    ALTER TABLE EMPLOYEE ADD COLUMN 
    SALARY INT NOT NULL;
    
------------------------------------------------------------------------------------------------

USE PROJECT;

SELECT * FROM AUTHOR;

SELECT * FROM BOOK;

SELECT * FROM EMPLOYEE;


/* Join */
SELECT* FROM ROLE;
SELECT * FROM EMPLOYEE;
SELECT E_NAME `NAME`, R_NAME ROLE FROM EMPLOYEE
INNER JOIN ROLE ON EMPLOYEE.ROLE_IDROLE = ROLE.IDROLE
ORDER BY IDROLE;
/*Select employee's name and roles*/ 

SELECT * FROM LIBRARY;
SELECT E_NAME `NAME`, LIBRARY_NAME LIBRARY FROM EMPLOYEE
LEFT OUTER JOIN LIBRARY ON LIBRARY.IDLIBRARY = EMPLOYEE.LIBRARY_idLIBRARY
ORDER BY IDLIBRARY;
/*Select employees ordered by libraries registered*/

SELECT * FROM READERS;
SELECT READER_NAME `NAME`, LIBRARY_NAME LIBRARY  FROM READERS
LEFT OUTER JOIN LIBRARY ON READERS.FK_IDLIBRARY = LIBRARY.IDLIBRARY;
/*select readers and the library they're registered on*/

SELECT * FROM PUBLISHER;
SELECT * FROM BOOK;
SELECT BOOK_TITLE Book, PUBLISHER.P_NAME Publisher FROM BOOK 
LEFT OUTER JOIN PUBLISHER ON PUBLISHER.IDPUBLISHER = BOOK.PUBLISHER_idPUBLISHER
ORDER BY IDPUBLISHER;
/*Select books erdered by publishers*/


SELECT * FROM AUTHOR;
SELECT BOOK_TITLE Book, AUTHOR_NAME Author FROM BOOK
LEFT OUTER JOIN AUTHOR ON BOOK.AUTHOR = AUTHOR.IDAUTHOR;
/*Select books and its authors*/
use project;

/* ORDER BY*/ 

SELECT * FROM BOOK;
SELECT P_NAME Publisher, COUNT(IDBOOK) Books FROM PUBLISHER
LEFT OUTER JOIN BOOK ON PUBLISHER.IDPUBLISHER = BOOK.PUBLISHER_idPUBLISHER
GROUP BY PUBLISHER
ORDER BY PUBLISHER;
/*Select publishers and order them by the number of books they own*/

SELECT E_NAME `NAME` FROM EMPLOYEE
ORDER BY SALARY;
/*Order employees' names by salary*/

SELECT BOOK_TITLE BOOK, NUM_OF_PAGES PAGES FROM BOOK 
ORDER BY NUM_OF_PAGES DESC;
/*Select books and order them by number of pages*/

SELECT * FROM BOOK;
SELECT BOOK_TITLE BOOK FROM BOOK
ORDER BY BOOK;
/*Select books and organize them by ALPHABETICAL ORDER*/

SELECT BOOK_TITLE BOOK, AUTHOR_NAME `AUTHOR` FROM BOOK
LEFT OUTER JOIN AUTHOR ON AUTHOR.IDAUTHOR = BOOK.AUTHOR
ORDER BY IDAUTHOR;
/*Select books and order them by author*/

/*GROUP BY*/

SELECT IDBOOK BOOKS, AUTHOR_NAME `NAME` FROM BOOK
INNER JOIN AUTHOR ON AUTHOR.IDAUTHOR = BOOK.AUTHOR
GROUP BY IDAUTHOR;
/*Select authors and the number of books of them*/

SELECT * FROM ROLE;
SELECT * FROM EMPLOYEE;
SELECT R_NAME ROLE, IDEMPLOYEE EMPLOYEES FROM EMPLOYEE
INNER JOIN ROLE ON ROLE.IDROLE = EMPLOYEE.ROLE_IDROLE
GROUP BY ROLE_IDROLE;
/*Select roles and the number of workers they got*/


/*MATHS*/

SELECT MAX(SALARY) HIGHEST, E_NAME `NAME` FROM EMPLOYEE;
/*Select the highest salary*/

SELECT * FROM LIBRARY;
SELECT * FROM EMPLOYEE;
SELECT AVG(SALARY) AVERAGE_SALARY, LIBRARY_NAME LIBRARY FROM EMPLOYEE
LEFT OUTER JOIN LIBRARY ON EMPLOYEE.LIBRARY_IDLIBRARY = LIBRARY.IDLIBRARY
GROUP BY IDLIBRARY;
/*Select the average salary of each library*/

SELECT MIN(SALARY) SMALLEST, E_NAME `NAME` FROM EMPLOYEE
LEFT OUTER JOIN LIBRARY ON EMPLOYEE.LIBRARY_IDLIBRARY = LIBRARY.IDLIBRARY
GROUP BY IDLIBRARY;
/*Select lowest paid employee of each library*/

SELECT * FROM BOOK;
SELECT COUNT(IDBOOK) BOOKS, AUTHOR_NAME AUTHOR FROM BOOK
INNER JOIN AUTHOR ON AUTHOR.IDAUTHOR = BOOK.AUTHOR
GROUP BY IDAUTHOR;
/*Select author and how many books they have*/

SELECT SUM(SALARY) `SUM` FROM EMPLOYEE
LEFT OUTER JOIN LIBRARY ON EMPLOYEE.LIBRARY_IDLIBRARY = LIBRARY.IDLIBRARY
GROUP BY IDLIBRARY;
/*Select how much money each library pay for their workers*/

SELECT MAX(NUM_OF_PAGES) BIGGEST FROM BOOK;
/*Select the book with the most pages*/

-> Start Transaction/Savepoints/Rollbacks = TCL 
-> DCL-> CREATE USER

SELECT * FROM READERS;

/*VIEWS*/

CREATE VIEW BOOKS 
AS SELECT BOOK_TITLE FROM BOOK
ORDER BY NUM_OF_PAGES
LIMIT 5;
/*Select the top 5 books with more pages*/

CREATE VIEW CURRENT_EMPLOYEES
AS SELECT E_NAME `NAME` FROM EMPLOYEE
ORDER BY LIBRARY_IDLIBRARY;
/*Select the employees of each library*/

CREATE VIEW HIGHEST_SALARY 
AS SELECT E_NAME `NAME`, SALARY FROM EMPLOYEE 
ORDER BY SALARY DESC
LIMIT 5;

/*Select the 5 highest salaries of all workers*/

SELECT * FROM EMPLOYEE;
CREATE VIEW AVERAGE_SALARY
AS SELECT AVG(SALARY) AVERAGE, LIBRARY_NAME LIBRARY FROM EMPLOYEE
LEFT OUTER JOIN LIBRARY ON LIBRARY.IDLIBRARY = EMPLOYEE.LIBRARY_idLIBRARY
GROUP BY LIBRARY_IDLIBRARY;
/*Select average salary for each library*/

SELECT * FROM READERS;
SELECT * FROM LIBRARY;
CREATE VIEW NUMBER_OF_READERS 
AS SELECT COUNT(IDREADERs) CLIENTS, LIBRARY_NAME LIBRARY  FROM READERS
LEFT OUTER JOIN LIBRARY ON LIBRARY.IDLIBRARY = READERS.FK_IDLIBRARY
GROUP BY IDLIBRARY;
/*Select number o readers from each library*/

/*USER*/

CREATE USER 'VIEWER'@'LOCALHOST' IDENTIFIED BY '1234';
GRANT SELECT ON *.* TO 'VIEWER'@'LOCALHOST';
/*User that can only select tables*/

CREATE USER 'MODFIER'@'LOCALHOST' IDENTIFIED BY '1234';
GRANT ALL PRIVILEGES on *.* TO 'MODFIER'@'localhost';
/*User that can do anything on all tables*/

CREATE USER 'LIBRARY'@'LOCALHOST' IDENTIFIED BY '1234';
GRANT ALL PRIVILEGES on LIBRARY TO 'LIBRARY'@'localhost';
/*User that can only use the library tables*/

/*SAVEPOINTS*/

/*Saveoints considerando inserts hipoteticos*/

SELECT * FROM EMPLOYEE;
START TRANSACTION;

SAVEPOINT savepoint1;
INSERT INTO EMPLOYEE VALUES(
11, 'Rafael Rosseto', '2434', 2, 3, 15000);

SAVEPOINT savepoint2;
INSERT INTO LIBRARY VALUES(
4, 'MEUDEUS', 'R. Padre Rossi');

SELECT * FROM AUTHOR;
SAVEPOINT savepoint3;
INSERT INTO AUTHOR VALUES(
16, 'Douglas Souza', '1209853');

